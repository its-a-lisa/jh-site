// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ka2iZDuLZRczy7yQTcifgT
// Component: 8tDhKfymfLuv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import LayoutPageLayout from "../../LayoutPageLayout"; // plasmic-import: yF50B3DN7y3u/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { CmsRowImage } from "@plasmicpkgs/plasmic-cms";
import ComponentsTrainingTrainings from "../../ComponentsTrainingTrainings"; // plasmic-import: Q4p7qV7d8189/component

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ka2iZDuLZRczy7yQTcifgT/projectcss
import sty from "./PlasmicPathwayPathway.module.css"; // plasmic-import: 8tDhKfymfLuv/css

createPlasmicElementProxy;

export type PlasmicPathwayPathway__VariantMembers = {};
export type PlasmicPathwayPathway__VariantsArgs = {};
type VariantPropType = keyof PlasmicPathwayPathway__VariantsArgs;
export const PlasmicPathwayPathway__VariantProps = new Array<VariantPropType>();

export type PlasmicPathwayPathway__ArgsType = {};
type ArgPropType = keyof PlasmicPathwayPathway__ArgsType;
export const PlasmicPathwayPathway__ArgProps = new Array<ArgPropType>();

export type PlasmicPathwayPathway__OverridesType = {
  root?: Flex__<typeof LayoutPageLayout>;
  columns?: Flex__<"div">;
  column?: Flex__<"div">;
  h1?: Flex__<"h1">;
  cmsEntryImage?: Flex__<typeof CmsRowImage>;
  img?: Flex__<typeof PlasmicImg__>;
  componentsTrainingTrainings?: Flex__<typeof ComponentsTrainingTrainings>;
};

export interface DefaultPathwayPathwayProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPathwayPathway__RenderFunc(props: {
  variants: PlasmicPathwayPathway__VariantsArgs;
  args: PlasmicPathwayPathway__ArgsType;
  overrides: PlasmicPathwayPathway__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicPathwayPathway.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicPathwayPathway.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicPathwayPathway.pageMetadata.title}
        />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicPathwayPathway.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicPathwayPathway.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <LayoutPageLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
        >
          <CmsQueryRepeater
            className={classNames("__wab_instance", sty.cmsDataFetcher__pt9Gz)}
            desc={false}
            emptyMessage={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rW5W
                    )}
                  >
                    {"No matching published entries found."}
                  </div>
                )}
              </DataCtxReader__>
            }
            fields={[]}
            filterField={"slug"}
            filterValue={(() => {
              try {
                return $ctx.params.slug;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            forceEmptyState={false}
            forceLoadingState={false}
            limit={1}
            loadingMessage={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3UYd
                    )}
                  >
                    {"Loading..."}
                  </div>
                )}
              </DataCtxReader__>
            }
            mode={"rows"}
            noAutoRepeat={false}
            noLayout={false}
            table={"pathway"}
            useDraft={false}
          >
            <DataCtxReader__>
              {$ctx => (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__c6O0L)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"columns"}
                    data-plasmic-override={overrides.columns}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"column"}
                      data-plasmic-override={overrides.column}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.column)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6VEeZ
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tteBc
                          )}
                        >
                          <h1
                            data-plasmic-name={"h1"}
                            data-plasmic-override={overrides.h1}
                            className={classNames(
                              projectcss.all,
                              projectcss.h1,
                              projectcss.__wab_text,
                              sty.h1
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.plasmicCmsPathwayItem.data.title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "John Hammond";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </h1>
                        </Stack__>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___0KqYs
                        )}
                      >
                        <CmsRowImage
                          data-plasmic-name={"cmsEntryImage"}
                          data-plasmic-override={overrides.cmsEntryImage}
                          className={classNames(
                            "__wab_instance",
                            sty.cmsEntryImage
                          )}
                          srcProp={"src"}
                        >
                          <PlasmicImg__
                            data-plasmic-name={"img"}
                            data-plasmic-override={overrides.img}
                            alt={""}
                            className={classNames(sty.img)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={(() => {
                              try {
                                return $ctx.plasmicCmsPathwayItem.data.image;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        </CmsRowImage>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ewVEh)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__kJTjK
                      )}
                    >
                      {"Description"}
                    </h3>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xgYq
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $ctx.plasmicCmsPathwayItem.data.description;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return '"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."';
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__vr8FR)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__pgCcB
                      )}
                    >
                      {"Courses"}
                    </h3>
                    <CmsQueryRepeater
                      className={classNames(
                        "__wab_instance",
                        sty.cmsDataFetcher___66Iph
                      )}
                      desc={false}
                      emptyMessage={
                        <DataCtxReader__>
                          {$ctx => (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9TPm1
                              )}
                            >
                              {"No matching published entries found."}
                            </div>
                          )}
                        </DataCtxReader__>
                      }
                      filterField={"pathway"}
                      filterValue={(() => {
                        try {
                          return $ctx.plasmicCmsPathwayItem.id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      forceEmptyState={false}
                      forceLoadingState={false}
                      limit={0}
                      loadingMessage={
                        <DataCtxReader__>
                          {$ctx => (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___1V1Ar
                              )}
                            >
                              {"Loading..."}
                            </div>
                          )}
                        </DataCtxReader__>
                      }
                      noAutoRepeat={false}
                      noLayout={false}
                      table={"learning"}
                      useDraft={false}
                    >
                      <DataCtxReader__>
                        {$ctx => (
                          <ComponentsTrainingTrainings
                            data-plasmic-name={"componentsTrainingTrainings"}
                            data-plasmic-override={
                              overrides.componentsTrainingTrainings
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.componentsTrainingTrainings
                            )}
                            filterField={"_id"}
                            filterValue={(() => {
                              try {
                                return $ctx.plasmicCmsLearningItem.id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        )}
                      </DataCtxReader__>
                    </CmsQueryRepeater>
                  </Stack__>
                </Stack__>
              )}
            </DataCtxReader__>
          </CmsQueryRepeater>
        </LayoutPageLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "columns",
    "column",
    "h1",
    "cmsEntryImage",
    "img",
    "componentsTrainingTrainings"
  ],
  columns: ["columns", "column", "h1", "cmsEntryImage", "img"],
  column: ["column", "h1", "cmsEntryImage", "img"],
  h1: ["h1"],
  cmsEntryImage: ["cmsEntryImage", "img"],
  img: ["img"],
  componentsTrainingTrainings: ["componentsTrainingTrainings"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof LayoutPageLayout;
  columns: "div";
  column: "div";
  h1: "h1";
  cmsEntryImage: typeof CmsRowImage;
  img: typeof PlasmicImg__;
  componentsTrainingTrainings: typeof ComponentsTrainingTrainings;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPathwayPathway__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPathwayPathway__VariantsArgs;
    args?: PlasmicPathwayPathway__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPathwayPathway__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPathwayPathway__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPathwayPathway__ArgProps,
          internalVariantPropNames: PlasmicPathwayPathway__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPathwayPathway__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPathwayPathway";
  } else {
    func.displayName = `PlasmicPathwayPathway.${nodeName}`;
  }
  return func;
}

export const PlasmicPathwayPathway = Object.assign(
  // Top-level PlasmicPathwayPathway renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    h1: makeNodeComponent("h1"),
    cmsEntryImage: makeNodeComponent("cmsEntryImage"),
    img: makeNodeComponent("img"),
    componentsTrainingTrainings: makeNodeComponent(
      "componentsTrainingTrainings"
    ),

    // Metadata about props expected for PlasmicPathwayPathway
    internalVariantProps: PlasmicPathwayPathway__VariantProps,
    internalArgProps: PlasmicPathwayPathway__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Just Hacking Pathway",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/ad7d781926a78eb9fbef8818120ae8ff.png",
      canonical: ""
    }
  }
);

export default PlasmicPathwayPathway;
/* prettier-ignore-end */
