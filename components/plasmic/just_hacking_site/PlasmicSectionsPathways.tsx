// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ka2iZDuLZRczy7yQTcifgT
// Component: ZdM-Ied11Vcn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import BaseComponentsButton from "../../BaseComponentsButton"; // plasmic-import: RJCN3wmY1s2W/component
import { DataProvider } from "@plasmicpkgs/plasmic-basic-components";

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ka2iZDuLZRczy7yQTcifgT/projectcss
import sty from "./PlasmicSectionsPathways.module.css"; // plasmic-import: ZdM-Ied11Vcn/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: _WS5X-3NT1mr/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: 32aCNZ5iI3FE/icon

createPlasmicElementProxy;

export type PlasmicSectionsPathways__VariantMembers = {};
export type PlasmicSectionsPathways__VariantsArgs = {};
type VariantPropType = keyof PlasmicSectionsPathways__VariantsArgs;
export const PlasmicSectionsPathways__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSectionsPathways__ArgsType = {};
type ArgPropType = keyof PlasmicSectionsPathways__ArgsType;
export const PlasmicSectionsPathways__ArgProps = new Array<ArgPropType>();

export type PlasmicSectionsPathways__OverridesType = {
  root?: Flex__<"div">;
  h2?: Flex__<"h2">;
  columns?: Flex__<"div">;
  h3?: Flex__<"h3">;
  baseComponentsButton?: Flex__<typeof BaseComponentsButton>;
  svg?: Flex__<"svg">;
  dataProvider?: Flex__<typeof DataProvider>;
  h4?: Flex__<"h4">;
};

export interface DefaultSectionsPathwaysProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionsPathways__RenderFunc(props: {
  variants: PlasmicSectionsPathways__VariantsArgs;
  args: PlasmicSectionsPathways__ArgsType;
  overrides: PlasmicSectionsPathways__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale")
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__n2Au)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__hoTyB)}
        >
          <h2
            data-plasmic-name={"h2"}
            data-plasmic-override={overrides.h2}
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2
            )}
          >
            {"Explore the unique pathways"}
          </h2>
        </Stack__>
        <div
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          className={classNames(projectcss.all, sty.columns)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.column__u2Owu)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___1NZoj)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__oXUdQ)}
              >
                <h3
                  data-plasmic-name={"h3"}
                  data-plasmic-override={overrides.h3}
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"Built for the"}
                    </span>
                    <React.Fragment>{"\n"}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {" Community"}
                    </span>
                  </React.Fragment>
                </h3>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__aIxj5)}
              >
                <BaseComponentsButton
                  data-plasmic-name={"baseComponentsButton"}
                  data-plasmic-override={overrides.baseComponentsButton}
                  backgroundEffect={"darken"}
                  className={classNames(
                    "__wab_instance",
                    sty.baseComponentsButton
                  )}
                  color={"primary"}
                  end={
                    <ChevronDownIcon
                      data-plasmic-name={"svg"}
                      data-plasmic-override={overrides.svg}
                      className={classNames(projectcss.all, sty.svg)}
                      role={"img"}
                    />
                  }
                  iconEnd={true}
                  kind={["fill"]}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8K0Pw
                      )}
                    >
                      {"Explore "}
                    </div>
                  }
                  linkTo={`/pathways`}
                  shape={"square"}
                />
              </Stack__>
            </Stack__>
          </Stack__>
          <div className={classNames(projectcss.all, sty.column__bCcna)}>
            <DataProvider
              data-plasmic-name={"dataProvider"}
              data-plasmic-override={overrides.dataProvider}
              className={classNames("__wab_instance", sty.dataProvider)}
              data={{
                offerings: [
                  {
                    type: "courses",
                    title: "Courses",
                    description:
                      "Elevate your cyber skills with immersive courses that deliver real-world, hands-on learning daily.!!"
                  },
                  {
                    type: "hack_alongs",
                    title: "Hack Alongs",
                    description:
                      "Dive into interactive hack alongs that simulate real attacks and sharpen your core skills in labs.!!"
                  },
                  {
                    type: "upskill_challenges",
                    title: "Upskill Challenges",
                    description:
                      "Tackle our upskill challenges to push your limits and rapidly upgrade tactics with every new task.!!"
                  },
                  {
                    type: "ctfs",
                    title: "Capture The Flags",
                    description:
                      "Engage in thrilling CTFs that test your wits and skills, forging your path to cyber mastery daily.!!"
                  }
                ]
              }}
              name={"pathways"}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vSYuj)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $ctx.pathways.offerings;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yNl4K
                          )}
                          key={currentIndex}
                        >
                          <h4
                            data-plasmic-name={"h4"}
                            data-plasmic-override={overrides.h4}
                            className={classNames(
                              projectcss.all,
                              projectcss.h4,
                              projectcss.__wab_text,
                              sty.h4
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Courses";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </h4>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4SepV
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.description;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                      );
                    })}
                  </div>
                )}
              </DataCtxReader__>
            </DataProvider>
          </div>
        </div>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h2",
    "columns",
    "h3",
    "baseComponentsButton",
    "svg",
    "dataProvider",
    "h4"
  ],
  h2: ["h2"],
  columns: [
    "columns",
    "h3",
    "baseComponentsButton",
    "svg",
    "dataProvider",
    "h4"
  ],
  h3: ["h3"],
  baseComponentsButton: ["baseComponentsButton", "svg"],
  svg: ["svg"],
  dataProvider: ["dataProvider", "h4"],
  h4: ["h4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h2: "h2";
  columns: "div";
  h3: "h3";
  baseComponentsButton: typeof BaseComponentsButton;
  svg: "svg";
  dataProvider: typeof DataProvider;
  h4: "h4";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionsPathways__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionsPathways__VariantsArgs;
    args?: PlasmicSectionsPathways__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSectionsPathways__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSectionsPathways__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionsPathways__ArgProps,
          internalVariantPropNames: PlasmicSectionsPathways__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionsPathways__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionsPathways";
  } else {
    func.displayName = `PlasmicSectionsPathways.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionsPathways = Object.assign(
  // Top-level PlasmicSectionsPathways renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    columns: makeNodeComponent("columns"),
    h3: makeNodeComponent("h3"),
    baseComponentsButton: makeNodeComponent("baseComponentsButton"),
    svg: makeNodeComponent("svg"),
    dataProvider: makeNodeComponent("dataProvider"),
    h4: makeNodeComponent("h4"),

    // Metadata about props expected for PlasmicSectionsPathways
    internalVariantProps: PlasmicSectionsPathways__VariantProps,
    internalArgProps: PlasmicSectionsPathways__ArgProps
  }
);

export default PlasmicSectionsPathways;
/* prettier-ignore-end */
