// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ka2iZDuLZRczy7yQTcifgT
// Component: Q4p7qV7d8189

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import ComponentsTrainingTraining from "../../ComponentsTrainingTraining"; // plasmic-import: g3uca0xLMsSl/component

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ka2iZDuLZRczy7yQTcifgT/projectcss
import sty from "./PlasmicComponentsTrainingTrainings.module.css"; // plasmic-import: Q4p7qV7d8189/css

createPlasmicElementProxy;

export type PlasmicComponentsTrainingTrainings__VariantMembers = {
  unnamedGroupOfVariants: "filtered";
};
export type PlasmicComponentsTrainingTrainings__VariantsArgs = {
  unnamedGroupOfVariants?: SingleChoiceArg<"filtered">;
};
type VariantPropType = keyof PlasmicComponentsTrainingTrainings__VariantsArgs;
export const PlasmicComponentsTrainingTrainings__VariantProps =
  new Array<VariantPropType>("unnamedGroupOfVariants");

export type PlasmicComponentsTrainingTrainings__ArgsType = {
  filterField?: "Dynamic options";
  filterValue?: string;
};
type ArgPropType = keyof PlasmicComponentsTrainingTrainings__ArgsType;
export const PlasmicComponentsTrainingTrainings__ArgProps =
  new Array<ArgPropType>("filterField", "filterValue");

export type PlasmicComponentsTrainingTrainings__OverridesType = {
  root?: Flex__<"div">;
  cmsDataFetcher?: Flex__<typeof CmsQueryRepeater>;
  componentsTrainingTraining?: Flex__<typeof ComponentsTrainingTraining>;
};

export interface DefaultComponentsTrainingTrainingsProps {
  filterField?: "Dynamic options";
  filterValue?: string;
  unnamedGroupOfVariants?: SingleChoiceArg<"filtered">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComponentsTrainingTrainings__RenderFunc(props: {
  variants: PlasmicComponentsTrainingTrainings__VariantsArgs;
  args: PlasmicComponentsTrainingTrainings__ArgsType;
  overrides: PlasmicComponentsTrainingTrainings__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "unnamedGroupOfVariants",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.unnamedGroupOfVariants
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale"),
          [sty.rootunnamedGroupOfVariants_filtered]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "filtered"
          )
        }
      )}
    >
      <CmsQueryRepeater
        data-plasmic-name={"cmsDataFetcher"}
        data-plasmic-override={overrides.cmsDataFetcher}
        className={classNames("__wab_instance", sty.cmsDataFetcher, {
          [sty.cmsDataFetcherunnamedGroupOfVariants_filtered]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "filtered"
          )
        })}
        desc={false}
        emptyMessage={
          <DataCtxReader__>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zhor0,
                  {
                    [sty.textunnamedGroupOfVariants_filtered__zhor0Ridpe]:
                      hasVariant($state, "unnamedGroupOfVariants", "filtered")
                  }
                )}
              >
                {"No matching published entries found."}
              </div>
            )}
          </DataCtxReader__>
        }
        fields={[]}
        filterField={args.filterField}
        filterValue={args.filterValue}
        forceEmptyState={false}
        forceLoadingState={false}
        limit={0}
        loadingMessage={
          <DataCtxReader__>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__l9JjA,
                  {
                    [sty.textunnamedGroupOfVariants_filtered__l9JjARidpe]:
                      hasVariant($state, "unnamedGroupOfVariants", "filtered")
                  }
                )}
              >
                {"Loading..."}
              </div>
            )}
          </DataCtxReader__>
        }
        noAutoRepeat={false}
        noLayout={false}
        table={"learning"}
        useDraft={false}
      >
        <DataCtxReader__>
          {$ctx => (
            <ComponentsTrainingTraining
              data-plasmic-name={"componentsTrainingTraining"}
              data-plasmic-override={overrides.componentsTrainingTraining}
              className={classNames(
                "__wab_instance",
                sty.componentsTrainingTraining,
                {
                  [sty.componentsTrainingTrainingunnamedGroupOfVariants_filtered]:
                    hasVariant($state, "unnamedGroupOfVariants", "filtered")
                }
              )}
              learningSlug={(() => {
                try {
                  return $ctx.plasmicCmsLearningItem.data.slug;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              usage={"card"}
            />
          )}
        </DataCtxReader__>
      </CmsQueryRepeater>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "cmsDataFetcher", "componentsTrainingTraining"],
  cmsDataFetcher: ["cmsDataFetcher", "componentsTrainingTraining"],
  componentsTrainingTraining: ["componentsTrainingTraining"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  cmsDataFetcher: typeof CmsQueryRepeater;
  componentsTrainingTraining: typeof ComponentsTrainingTraining;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicComponentsTrainingTrainings__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicComponentsTrainingTrainings__VariantsArgs;
    args?: PlasmicComponentsTrainingTrainings__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicComponentsTrainingTrainings__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicComponentsTrainingTrainings__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComponentsTrainingTrainings__ArgProps,
          internalVariantPropNames:
            PlasmicComponentsTrainingTrainings__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComponentsTrainingTrainings__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComponentsTrainingTrainings";
  } else {
    func.displayName = `PlasmicComponentsTrainingTrainings.${nodeName}`;
  }
  return func;
}

export const PlasmicComponentsTrainingTrainings = Object.assign(
  // Top-level PlasmicComponentsTrainingTrainings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    cmsDataFetcher: makeNodeComponent("cmsDataFetcher"),
    componentsTrainingTraining: makeNodeComponent("componentsTrainingTraining"),

    // Metadata about props expected for PlasmicComponentsTrainingTrainings
    internalVariantProps: PlasmicComponentsTrainingTrainings__VariantProps,
    internalArgProps: PlasmicComponentsTrainingTrainings__ArgProps
  }
);

export default PlasmicComponentsTrainingTrainings;
/* prettier-ignore-end */
