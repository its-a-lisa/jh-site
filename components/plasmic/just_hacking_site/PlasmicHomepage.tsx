// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ka2iZDuLZRczy7yQTcifgT
// Component: bzQxfZoV1IUF

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import LayoutPageLayout from "../../LayoutPageLayout"; // plasmic-import: yF50B3DN7y3u/component
import SectionsHero from "../../SectionsHero"; // plasmic-import: 7l-sQsZsFKno/component
import NewLineup from "../../NewLineup"; // plasmic-import: YgqjE0gxR19_/component
import SectionsComingSoon from "../../SectionsComingSoon"; // plasmic-import: _FB-Oq3v7Rjj/component
import SectionsPathways from "../../SectionsPathways"; // plasmic-import: ZdM-Ied11Vcn/component
import SectionsFeatures from "../../SectionsFeatures"; // plasmic-import: kfQ6edVcoSz5/component
import SectionsTestimonials from "../../SectionsTestimonials"; // plasmic-import: IwKbutgWeSyx/component
import SectionsPublications from "../../SectionsPublications"; // plasmic-import: RB6PUYM82WJZ/component
import SectionsSellingPoints from "../../SectionsSellingPoints"; // plasmic-import: 9mwJf-RhFZd2/component

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ka2iZDuLZRczy7yQTcifgT/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: bzQxfZoV1IUF/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<typeof LayoutPageLayout>;
  sectionsHero?: Flex__<typeof SectionsHero>;
  newLineup?: Flex__<typeof NewLineup>;
  sectionsComingSoon?: Flex__<typeof SectionsComingSoon>;
  sectionsPathways?: Flex__<typeof SectionsPathways>;
  sectionsFeatures?: Flex__<typeof SectionsFeatures>;
  sectionsTestimonials?: Flex__<typeof SectionsTestimonials>;
  sectionsPublications?: Flex__<typeof SectionsPublications>;
  sectionsSellingPoints?: Flex__<typeof SectionsSellingPoints>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <LayoutPageLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root, {
            [sty.rootglobal_theme_dark]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            )
          })}
        >
          <SectionsHero
            data-plasmic-name={"sectionsHero"}
            data-plasmic-override={overrides.sectionsHero}
            className={classNames("__wab_instance", sty.sectionsHero, {
              [sty.sectionsHeroglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
          />

          <NewLineup
            data-plasmic-name={"newLineup"}
            data-plasmic-override={overrides.newLineup}
            className={classNames("__wab_instance", sty.newLineup)}
          />

          <SectionsComingSoon
            data-plasmic-name={"sectionsComingSoon"}
            data-plasmic-override={overrides.sectionsComingSoon}
            className={classNames("__wab_instance", sty.sectionsComingSoon)}
          />

          <SectionsPathways
            data-plasmic-name={"sectionsPathways"}
            data-plasmic-override={overrides.sectionsPathways}
            className={classNames("__wab_instance", sty.sectionsPathways)}
          />

          <SectionsFeatures
            data-plasmic-name={"sectionsFeatures"}
            data-plasmic-override={overrides.sectionsFeatures}
            className={classNames("__wab_instance", sty.sectionsFeatures)}
          />

          <SectionsTestimonials
            data-plasmic-name={"sectionsTestimonials"}
            data-plasmic-override={overrides.sectionsTestimonials}
            className={classNames("__wab_instance", sty.sectionsTestimonials)}
          />

          <SectionsPublications
            data-plasmic-name={"sectionsPublications"}
            data-plasmic-override={overrides.sectionsPublications}
            className={classNames("__wab_instance", sty.sectionsPublications)}
          />

          <SectionsSellingPoints
            data-plasmic-name={"sectionsSellingPoints"}
            data-plasmic-override={overrides.sectionsSellingPoints}
            className={classNames("__wab_instance", sty.sectionsSellingPoints, {
              [sty.sectionsSellingPointsglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
          />
        </LayoutPageLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sectionsHero",
    "newLineup",
    "sectionsComingSoon",
    "sectionsPathways",
    "sectionsFeatures",
    "sectionsTestimonials",
    "sectionsPublications",
    "sectionsSellingPoints"
  ],
  sectionsHero: ["sectionsHero"],
  newLineup: ["newLineup"],
  sectionsComingSoon: ["sectionsComingSoon"],
  sectionsPathways: ["sectionsPathways"],
  sectionsFeatures: ["sectionsFeatures"],
  sectionsTestimonials: ["sectionsTestimonials"],
  sectionsPublications: ["sectionsPublications"],
  sectionsSellingPoints: ["sectionsSellingPoints"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof LayoutPageLayout;
  sectionsHero: typeof SectionsHero;
  newLineup: typeof NewLineup;
  sectionsComingSoon: typeof SectionsComingSoon;
  sectionsPathways: typeof SectionsPathways;
  sectionsFeatures: typeof SectionsFeatures;
  sectionsTestimonials: typeof SectionsTestimonials;
  sectionsPublications: typeof SectionsPublications;
  sectionsSellingPoints: typeof SectionsSellingPoints;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionsHero: makeNodeComponent("sectionsHero"),
    newLineup: makeNodeComponent("newLineup"),
    sectionsComingSoon: makeNodeComponent("sectionsComingSoon"),
    sectionsPathways: makeNodeComponent("sectionsPathways"),
    sectionsFeatures: makeNodeComponent("sectionsFeatures"),
    sectionsTestimonials: makeNodeComponent("sectionsTestimonials"),
    sectionsPublications: makeNodeComponent("sectionsPublications"),
    sectionsSellingPoints: makeNodeComponent("sectionsSellingPoints"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
