// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ka2iZDuLZRczy7yQTcifgT
// Component: YgqjE0gxR19_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ComponentsAuthorSuperstar from "../../ComponentsAuthorSuperstar"; // plasmic-import: weUHkqKNKWAZ/component

import { useScreenVariants as useScreenVariantssqmLxjkgQr } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: sqmLXJKG--Qr/globalVariant
import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ka2iZDuLZRczy7yQTcifgT/projectcss
import sty from "./PlasmicNewLineup.module.css"; // plasmic-import: YgqjE0gxR19_/css

createPlasmicElementProxy;

export type PlasmicNewLineup__VariantMembers = {};
export type PlasmicNewLineup__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewLineup__VariantsArgs;
export const PlasmicNewLineup__VariantProps = new Array<VariantPropType>();

export type PlasmicNewLineup__ArgsType = {};
type ArgPropType = keyof PlasmicNewLineup__ArgsType;
export const PlasmicNewLineup__ArgProps = new Array<ArgPropType>();

export type PlasmicNewLineup__OverridesType = {
  root?: Flex__<"div">;
  h3?: Flex__<"h3">;
  h5?: Flex__<"h5">;
  img?: Flex__<typeof PlasmicImg__>;
  h6?: Flex__<"h6">;
};

export interface DefaultNewLineupProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewLineup__RenderFunc(props: {
  variants: PlasmicNewLineup__VariantsArgs;
  args: PlasmicNewLineup__ArgsType;
  overrides: PlasmicNewLineup__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssqmLxjkgQr(),
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale")
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__mHrMm)}>
        <div className={classNames(projectcss.all, sty.freeBox___66Obv)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___6F42E)}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__plXoT)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__j0Doz
              )}
            >
              {"Learn how to become a star"}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ejleT)}
          />
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__c7SUl)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__hf0Yc)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__yUmtw)}
            />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__d0T3H)}
            >
              <h3
                data-plasmic-name={"h3"}
                data-plasmic-override={overrides.h3}
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3
                )}
              >
                {hasVariant(globalVariants, "screen", "small")
                  ? "All Star Lineup"
                  : "All Star\n Lineup"}
              </h3>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ovCo)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zyj5)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__uJTq)}>
                  <ComponentsAuthorSuperstar
                    className={classNames(
                      "__wab_instance",
                      sty.componentsAuthorSuperstar__t6BLd
                    )}
                  >
                    {"Katie Paxton-Fear"}
                  </ComponentsAuthorSuperstar>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__kcYkt)}>
                  <ComponentsAuthorSuperstar
                    className={classNames(
                      "__wab_instance",
                      sty.componentsAuthorSuperstar__mzeea
                    )}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox___8Pjs)}>
                  <ComponentsAuthorSuperstar
                    className={classNames(
                      "__wab_instance",
                      sty.componentsAuthorSuperstar__dkuzB
                    )}
                  >
                    {"Joe Helle"}
                  </ComponentsAuthorSuperstar>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gdCs8)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___8XMcu)}
                >
                  <ComponentsAuthorSuperstar
                    className={classNames(
                      "__wab_instance",
                      sty.componentsAuthorSuperstar__hVBx
                    )}
                  >
                    {"Anton Ovrutsky"}
                  </ComponentsAuthorSuperstar>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__cU7NO)}>
                  <ComponentsAuthorSuperstar
                    className={classNames(
                      "__wab_instance",
                      sty.componentsAuthorSuperstar__zmmxd
                    )}
                  >
                    {"Mishaal Khan"}
                  </ComponentsAuthorSuperstar>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__sx7Uz)}>
                  <ComponentsAuthorSuperstar
                    className={classNames(
                      "__wab_instance",
                      sty.componentsAuthorSuperstar__hm5BS
                    )}
                  >
                    {"Slavi Parpulev"}
                  </ComponentsAuthorSuperstar>
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__t9MaV)}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__uDlEv)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vR8Tq)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__cZykt)} />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vbnOr)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__dWaLo)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__iP3Ci)}
                >
                  <h5
                    data-plasmic-name={"h5"}
                    data-plasmic-override={overrides.h5}
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5
                    )}
                  >
                    {"Featured Instructor"}
                  </h5>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ecBby
                    )}
                  >
                    {
                      "Orci dui condimentum rutrum laoreet hac purus porta sem sem a vivamus a posuere vel molestie."
                    }
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__hpTst)}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"64px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/just_hacking_site/images/authorAvatarPng.png",
                        fullWidth: 800,
                        fullHeight: 800,
                        aspectRatio: undefined
                      }}
                    />

                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__cB0It)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tUf8Z
                        )}
                      >
                        <h6
                          data-plasmic-name={"h6"}
                          data-plasmic-override={overrides.h6}
                          className={classNames(
                            projectcss.all,
                            projectcss.h6,
                            projectcss.__wab_text,
                            sty.h6
                          )}
                        >
                          {"Ali Hadi"}
                        </h6>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__arov6
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vwXd
                          )}
                        >
                          {"Best Instructor Evor"}
                        </div>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__viix8)}
            />
          </div>
        </Stack__>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h3", "h5", "img", "h6"],
  h3: ["h3"],
  h5: ["h5"],
  img: ["img"],
  h6: ["h6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h3: "h3";
  h5: "h5";
  img: typeof PlasmicImg__;
  h6: "h6";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewLineup__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewLineup__VariantsArgs;
    args?: PlasmicNewLineup__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewLineup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewLineup__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewLineup__ArgProps,
          internalVariantPropNames: PlasmicNewLineup__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewLineup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewLineup";
  } else {
    func.displayName = `PlasmicNewLineup.${nodeName}`;
  }
  return func;
}

export const PlasmicNewLineup = Object.assign(
  // Top-level PlasmicNewLineup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    h5: makeNodeComponent("h5"),
    img: makeNodeComponent("img"),
    h6: makeNodeComponent("h6"),

    // Metadata about props expected for PlasmicNewLineup
    internalVariantProps: PlasmicNewLineup__VariantProps,
    internalArgProps: PlasmicNewLineup__ArgProps
  }
);

export default PlasmicNewLineup;
/* prettier-ignore-end */
