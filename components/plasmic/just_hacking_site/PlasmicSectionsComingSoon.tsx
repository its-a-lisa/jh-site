// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ka2iZDuLZRczy7yQTcifgT
// Component: _FB-Oq3v7Rjj

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { CmsRowImage } from "@plasmicpkgs/plasmic-cms";
import { CmsRowField } from "@plasmicpkgs/plasmic-cms";

import { useScreenVariants as useScreenVariantssqmLxjkgQr } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: sqmLXJKG--Qr/globalVariant
import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ka2iZDuLZRczy7yQTcifgT/projectcss
import sty from "./PlasmicSectionsComingSoon.module.css"; // plasmic-import: _FB-Oq3v7Rjj/css

createPlasmicElementProxy;

export type PlasmicSectionsComingSoon__VariantMembers = {};
export type PlasmicSectionsComingSoon__VariantsArgs = {};
type VariantPropType = keyof PlasmicSectionsComingSoon__VariantsArgs;
export const PlasmicSectionsComingSoon__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSectionsComingSoon__ArgsType = {};
type ArgPropType = keyof PlasmicSectionsComingSoon__ArgsType;
export const PlasmicSectionsComingSoon__ArgProps = new Array<ArgPropType>();

export type PlasmicSectionsComingSoon__OverridesType = {
  root?: Flex__<"div">;
  h2?: Flex__<"h2">;
  body2?: Flex__<"div">;
  title2?: Flex__<"div">;
  author2?: Flex__<"div">;
  body5?: Flex__<"div">;
  title5?: Flex__<"div">;
  author5?: Flex__<"div">;
};

export interface DefaultSectionsComingSoonProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionsComingSoon__RenderFunc(props: {
  variants: PlasmicSectionsComingSoon__VariantsArgs;
  args: PlasmicSectionsComingSoon__ArgsType;
  overrides: PlasmicSectionsComingSoon__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssqmLxjkgQr(),
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale")
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__qw4Ob)}>
        <div className={classNames(projectcss.all, sty.freeBox__gpn8M)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ctyJq)}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ghMyO)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gEkb)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zwUsw)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__z5BE7)}
                >
                  <h2
                    data-plasmic-name={"h2"}
                    data-plasmic-override={overrides.h2}
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Coming Soon"}
                      </span>
                    </React.Fragment>
                  </h2>
                </Stack__>
              </Stack__>
            </Stack__>
          </Stack__>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__wm9)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__aWdK3)}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__awPcQ)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___7FdMr
              )}
            >
              {""}
            </div>
          </Stack__>
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__vfiZg)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__qXirS)}
          >
            <CmsQueryRepeater
              className={classNames("__wab_instance", sty.cmsDataFetcher__jTx1)}
              desc={false}
              emptyMessage={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sWqVt
                      )}
                    >
                      {"No matching published entries found."}
                    </div>
                  )}
                </DataCtxReader__>
              }
              filterField={"slug"}
              filterValue={"level-up-osint"}
              forceEmptyState={false}
              forceLoadingState={false}
              limit={1}
              loadingMessage={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__t9OWm
                      )}
                    >
                      {"Loading..."}
                    </div>
                  )}
                </DataCtxReader__>
              }
              noAutoRepeat={false}
              noLayout={false}
              table={"learning"}
              useDraft={false}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fLbsT)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToCatalogTraining"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/training/${(() => {
                                try {
                                  return $ctx.plasmicCmsLearningItem.data.slug;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToCatalogTraining"] != null &&
                        typeof $steps["goToCatalogTraining"] === "object" &&
                        typeof $steps["goToCatalogTraining"].then === "function"
                      ) {
                        $steps["goToCatalogTraining"] = await $steps[
                          "goToCatalogTraining"
                        ];
                      }
                    }}
                  >
                    <div
                      data-plasmic-name={"body2"}
                      data-plasmic-override={overrides.body2}
                      className={classNames(projectcss.all, sty.body2)}
                    >
                      <CmsRowImage
                        className={classNames(
                          "__wab_instance",
                          sty.cmsEntryImage__zfgNx
                        )}
                        srcProp={"src"}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__pGd5E)}
                          displayHeight={"100%"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          loading={"eager"}
                          src={(() => {
                            try {
                              return $ctx.plasmicCmsLearningItem.data.thumbnail;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </CmsRowImage>
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"title2"}
                      data-plasmic-override={overrides.title2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.title2)}
                    >
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6__mvKtf
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.plasmicCmsLearningItem.identifier;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "John Hammond";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </h6>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"author2"}
                      data-plasmic-override={overrides.author2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.author2)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.column__eN52X
                        )}
                      >
                        <CmsQueryRepeater
                          className={classNames(
                            "__wab_instance",
                            sty.cmsDataFetcher__zsvfs
                          )}
                          desc={false}
                          emptyMessage={
                            <DataCtxReader__>
                              {$ctx => (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___1ZbZl
                                  )}
                                >
                                  {"No matching published entries found."}
                                </div>
                              )}
                            </DataCtxReader__>
                          }
                          fields={["name"]}
                          filterField={"_id"}
                          filterValue={(() => {
                            try {
                              return $ctx.plasmicCmsLearningItem.data.author;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          forceEmptyState={false}
                          forceLoadingState={false}
                          limit={1}
                          loadingMessage={
                            <DataCtxReader__>
                              {$ctx => (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__njoDv
                                  )}
                                >
                                  {"Loading..."}
                                </div>
                              )}
                            </DataCtxReader__>
                          }
                          noAutoRepeat={false}
                          noLayout={false}
                          table={"author"}
                          useDraft={false}
                        >
                          <DataCtxReader__>
                            {$ctx => (
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__gxgdB
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__azy25
                                  )}
                                >
                                  {"By: "}
                                </div>
                                <CmsRowField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.cmsEntryField__lSzeP
                                  )}
                                  field={"name"}
                                  table={"author"}
                                  themeResetClassName={classNames(
                                    projectcss.root_reset,
                                    projectcss.root_reset_tags,
                                    projectcss.plasmic_default_styles,
                                    projectcss.plasmic_mixins,
                                    projectcss.plasmic_tokens,
                                    plasmic_17_sds_foundation_global_css.plasmic_tokens,
                                    plasmic_17_sds_foundation_system_css.plasmic_tokens,
                                    {
                                      [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
                                        hasVariant(
                                          globalVariants,
                                          "theme",
                                          "darkGrayscale"
                                        ),
                                      [plasmic_17_sds_foundation_global_css.global_theme_dark]:
                                        hasVariant(
                                          globalVariants,
                                          "theme",
                                          "dark"
                                        ),
                                      [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
                                        hasVariant(
                                          globalVariants,
                                          "theme",
                                          "grayscale"
                                        )
                                    }
                                  )}
                                />
                              </Stack__>
                            )}
                          </DataCtxReader__>
                        </CmsQueryRepeater>
                      </Stack__>
                    </Stack__>
                  </div>
                )}
              </DataCtxReader__>
            </CmsQueryRepeater>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__rCzqP)}
          >
            <CmsQueryRepeater
              className={classNames(
                "__wab_instance",
                sty.cmsDataFetcher__k7B13
              )}
              desc={false}
              emptyMessage={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__miWSx
                      )}
                    >
                      {"No matching published entries found."}
                    </div>
                  )}
                </DataCtxReader__>
              }
              filterField={"slug"}
              filterValue={"reading-binary-data"}
              forceEmptyState={false}
              forceLoadingState={false}
              limit={1}
              loadingMessage={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__w3Tym
                      )}
                    >
                      {"Loading..."}
                    </div>
                  )}
                </DataCtxReader__>
              }
              noAutoRepeat={false}
              noLayout={false}
              table={"learning"}
              useDraft={false}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rr1Hy)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToCatalogTraining"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/training/${(() => {
                                try {
                                  return $ctx.plasmicCmsLearningItem.data.slug;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToCatalogTraining"] != null &&
                        typeof $steps["goToCatalogTraining"] === "object" &&
                        typeof $steps["goToCatalogTraining"].then === "function"
                      ) {
                        $steps["goToCatalogTraining"] = await $steps[
                          "goToCatalogTraining"
                        ];
                      }
                    }}
                  >
                    <div
                      data-plasmic-name={"body5"}
                      data-plasmic-override={overrides.body5}
                      className={classNames(projectcss.all, sty.body5)}
                    >
                      <CmsRowImage
                        className={classNames(
                          "__wab_instance",
                          sty.cmsEntryImage__hEPoT
                        )}
                        srcProp={"src"}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___1IkQ7)}
                          displayHeight={"100%"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          loading={"eager"}
                          src={(() => {
                            try {
                              return $ctx.plasmicCmsLearningItem.data.thumbnail;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </CmsRowImage>
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"title5"}
                      data-plasmic-override={overrides.title5}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.title5)}
                    >
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6___2TFdP
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.plasmicCmsLearningItem.identifier;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "John Hammond";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </h6>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"author5"}
                      data-plasmic-override={overrides.author5}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.author5)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.column__bawZc
                        )}
                      >
                        <CmsQueryRepeater
                          className={classNames(
                            "__wab_instance",
                            sty.cmsDataFetcher__e8LDf
                          )}
                          desc={false}
                          emptyMessage={
                            <DataCtxReader__>
                              {$ctx => (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__s2RjS
                                  )}
                                >
                                  {"No matching published entries found."}
                                </div>
                              )}
                            </DataCtxReader__>
                          }
                          fields={["name"]}
                          filterField={"_id"}
                          filterValue={(() => {
                            try {
                              return $ctx.plasmicCmsLearningItem.data.author;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          forceEmptyState={false}
                          forceLoadingState={false}
                          limit={1}
                          loadingMessage={
                            <DataCtxReader__>
                              {$ctx => (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__zobuq
                                  )}
                                >
                                  {"Loading..."}
                                </div>
                              )}
                            </DataCtxReader__>
                          }
                          noAutoRepeat={false}
                          noLayout={false}
                          table={"author"}
                          useDraft={false}
                        >
                          <DataCtxReader__>
                            {$ctx => (
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__b8JcO
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__cScPq
                                  )}
                                >
                                  {"By: "}
                                </div>
                                <CmsRowField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.cmsEntryField__tTn37
                                  )}
                                  field={"name"}
                                  table={"author"}
                                  themeResetClassName={classNames(
                                    projectcss.root_reset,
                                    projectcss.root_reset_tags,
                                    projectcss.plasmic_default_styles,
                                    projectcss.plasmic_mixins,
                                    projectcss.plasmic_tokens,
                                    plasmic_17_sds_foundation_global_css.plasmic_tokens,
                                    plasmic_17_sds_foundation_system_css.plasmic_tokens,
                                    {
                                      [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
                                        hasVariant(
                                          globalVariants,
                                          "theme",
                                          "darkGrayscale"
                                        ),
                                      [plasmic_17_sds_foundation_global_css.global_theme_dark]:
                                        hasVariant(
                                          globalVariants,
                                          "theme",
                                          "dark"
                                        ),
                                      [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
                                        hasVariant(
                                          globalVariants,
                                          "theme",
                                          "grayscale"
                                        )
                                    }
                                  )}
                                />
                              </Stack__>
                            )}
                          </DataCtxReader__>
                        </CmsQueryRepeater>
                      </Stack__>
                    </Stack__>
                  </div>
                )}
              </DataCtxReader__>
            </CmsQueryRepeater>
          </Stack__>
        </Stack__>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h2",
    "body2",
    "title2",
    "author2",
    "body5",
    "title5",
    "author5"
  ],
  h2: ["h2"],
  body2: ["body2"],
  title2: ["title2"],
  author2: ["author2"],
  body5: ["body5"],
  title5: ["title5"],
  author5: ["author5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h2: "h2";
  body2: "div";
  title2: "div";
  author2: "div";
  body5: "div";
  title5: "div";
  author5: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionsComingSoon__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionsComingSoon__VariantsArgs;
    args?: PlasmicSectionsComingSoon__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSectionsComingSoon__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSectionsComingSoon__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionsComingSoon__ArgProps,
          internalVariantPropNames: PlasmicSectionsComingSoon__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionsComingSoon__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionsComingSoon";
  } else {
    func.displayName = `PlasmicSectionsComingSoon.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionsComingSoon = Object.assign(
  // Top-level PlasmicSectionsComingSoon renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    body2: makeNodeComponent("body2"),
    title2: makeNodeComponent("title2"),
    author2: makeNodeComponent("author2"),
    body5: makeNodeComponent("body5"),
    title5: makeNodeComponent("title5"),
    author5: makeNodeComponent("author5"),

    // Metadata about props expected for PlasmicSectionsComingSoon
    internalVariantProps: PlasmicSectionsComingSoon__VariantProps,
    internalArgProps: PlasmicSectionsComingSoon__ArgProps
  }
);

export default PlasmicSectionsComingSoon;
/* prettier-ignore-end */
