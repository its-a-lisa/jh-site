// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ka2iZDuLZRczy7yQTcifgT
// Component: cAEhwOH9D29A

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import LayoutPageLayout from "../../LayoutPageLayout"; // plasmic-import: yF50B3DN7y3u/component
import ComponentsPathwayOfferingItem from "../../ComponentsPathwayOfferingItem"; // plasmic-import: nQYqBjZb5dcX/component
import BaseComponentsListItem from "../../BaseComponentsListItem"; // plasmic-import: AilJMeiiLU0t/component
import BaseComponentsButton from "../../BaseComponentsButton"; // plasmic-import: RJCN3wmY1s2W/component
import ComponentsTrainingTrainingGrid from "../../ComponentsTrainingTrainingGrid"; // plasmic-import: zSuJsJOabVOR/component

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantssqmLxjkgQr } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: sqmLXJKG--Qr/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ka2iZDuLZRczy7yQTcifgT/projectcss
import sty from "./PlasmicPathwayPathways.module.css"; // plasmic-import: cAEhwOH9D29A/css

import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: 4afhqqqjv41U/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: _WS5X-3NT1mr/icon
import FaAngleRightSvgIcon from "./icons/PlasmicIcon__FaAngleRightSvg"; // plasmic-import: fI4-p36KLtYb/icon

createPlasmicElementProxy;

export type PlasmicPathwayPathways__VariantMembers = {};
export type PlasmicPathwayPathways__VariantsArgs = {};
type VariantPropType = keyof PlasmicPathwayPathways__VariantsArgs;
export const PlasmicPathwayPathways__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPathwayPathways__ArgsType = {
  authorName?: string;
};
type ArgPropType = keyof PlasmicPathwayPathways__ArgsType;
export const PlasmicPathwayPathways__ArgProps = new Array<ArgPropType>(
  "authorName"
);

export type PlasmicPathwayPathways__OverridesType = {
  root?: Flex__<"div">;
  layoutPageLayout?: Flex__<typeof LayoutPageLayout>;
  h1?: Flex__<"h1">;
  upskillChallenges?: Flex__<typeof ComponentsPathwayOfferingItem>;
  hackALongs?: Flex__<typeof ComponentsPathwayOfferingItem>;
  captureTheFlag?: Flex__<typeof ComponentsPathwayOfferingItem>;
};

export interface DefaultPathwayPathwaysProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPathwayPathways__RenderFunc(props: {
  variants: PlasmicPathwayPathways__VariantsArgs;
  args: PlasmicPathwayPathways__ArgsType;
  overrides: PlasmicPathwayPathways__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantssqmLxjkgQr(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicPathwayPathways.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicPathwayPathways.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicPathwayPathways.pageMetadata.title}
        />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicPathwayPathways.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicPathwayPathways.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_17_sds_foundation_global_css.plasmic_tokens,
            plasmic_17_sds_foundation_system_css.plasmic_tokens,
            sty.root,
            {
              [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
                hasVariant(globalVariants, "theme", "darkGrayscale"),
              [plasmic_17_sds_foundation_global_css.global_theme_dark]:
                hasVariant(globalVariants, "theme", "dark"),
              [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
                hasVariant(globalVariants, "theme", "grayscale"),
              [sty.rootglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            }
          )}
        >
          <LayoutPageLayout
            data-plasmic-name={"layoutPageLayout"}
            data-plasmic-override={overrides.layoutPageLayout}
            className={classNames("__wab_instance", sty.layoutPageLayout)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___90Gyf)}
            >
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"Pathways"}
              </h1>
              <div
                className={classNames(projectcss.all, sty.freeBox__qGn0W, {
                  [sty.freeBoxglobal_theme_dark__qGn0We6UCs]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  )
                })}
              >
                <ComponentsPathwayOfferingItem
                  data-plasmic-name={"upskillChallenges"}
                  data-plasmic-override={overrides.upskillChallenges}
                  actionSlot={
                    <BaseComponentsButton
                      className={classNames(
                        "__wab_instance",
                        sty.baseComponentsButton___19I4N
                      )}
                      color={"secondary"}
                      end={
                        <FaAngleRightSvgIcon
                          className={classNames(projectcss.all, sty.svg__oRa8)}
                          role={"img"}
                        />
                      }
                      iconEnd={true}
                      kind={["fill"]}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9JfeH
                          )}
                        >
                          {"See all UCs"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToUpskillChallenge"] = true
                          ? (() => {
                              const actionArgs = {};
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToUpskillChallenge"] != null &&
                          typeof $steps["goToUpskillChallenge"] === "object" &&
                          typeof $steps["goToUpskillChallenge"].then ===
                            "function"
                        ) {
                          $steps["goToUpskillChallenge"] = await $steps[
                            "goToUpskillChallenge"
                          ];
                        }
                      }}
                    />
                  }
                  centered={true}
                  className={classNames(
                    "__wab_instance",
                    sty.upskillChallenges,
                    {
                      [sty.upskillChallengesglobal_theme_dark]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                  imageSlot={
                    <ComponentsTrainingTrainingGrid
                      className={classNames(
                        "__wab_instance",
                        sty.componentsTrainingTrainingGrid__mnEeh
                      )}
                    />
                  }
                  offeringListSlot={
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__trAr)}
                    >
                      <BaseComponentsListItem
                        className={classNames(
                          "__wab_instance",
                          sty.baseComponentsListItem__z03Iq
                        )}
                        reverse={true}
                      >
                        {"UCs are bite-sized training lessons"}
                      </BaseComponentsListItem>
                      <BaseComponentsListItem
                        className={classNames(
                          "__wab_instance",
                          sty.baseComponentsListItem__u5Xxr
                        )}
                        reverse={true}
                      >
                        {"Only 10 - 30 minutes of student time"}
                      </BaseComponentsListItem>
                      <BaseComponentsListItem
                        className={classNames(
                          "__wab_instance",
                          sty.baseComponentsListItem__btIq6
                        )}
                        reverse={true}
                      >
                        {"Quiz to check understanding"}
                      </BaseComponentsListItem>
                      <BaseComponentsListItem
                        className={classNames(
                          "__wab_instance",
                          sty.baseComponentsListItem__llExX,
                          {
                            [sty.baseComponentsListItemglobal_theme_dark__llExXe6UCs]:
                              hasVariant(globalVariants, "theme", "dark")
                          }
                        )}
                        reverse={true}
                      >
                        {"Completely free"}
                      </BaseComponentsListItem>
                    </Stack__>
                  }
                  reverse={true}
                />

                <ComponentsPathwayOfferingItem
                  data-plasmic-name={"hackALongs"}
                  data-plasmic-override={overrides.hackALongs}
                  actionSlot={
                    <BaseComponentsButton
                      className={classNames(
                        "__wab_instance",
                        sty.baseComponentsButton___1VJr5
                      )}
                      color={"secondary"}
                      end={
                        <FaAngleRightSvgIcon
                          className={classNames(projectcss.all, sty.svg__pv9MZ)}
                          role={"img"}
                        />
                      }
                      iconEnd={true}
                      kind={["fill"]}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__a7RlE
                          )}
                        >
                          {"See all HACs"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToHackALongChallenges"] = true
                          ? (() => {
                              const actionArgs = {};
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToHackALongChallenges"] != null &&
                          typeof $steps["goToHackALongChallenges"] ===
                            "object" &&
                          typeof $steps["goToHackALongChallenges"].then ===
                            "function"
                        ) {
                          $steps["goToHackALongChallenges"] = await $steps[
                            "goToHackALongChallenges"
                          ];
                        }
                      }}
                    />
                  }
                  centered={true}
                  className={classNames("__wab_instance", sty.hackALongs, {
                    [sty.hackALongsglobal_theme_dark]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  })}
                  headingSlot={"Hack Alongs"}
                  imageSlot={
                    <ComponentsTrainingTrainingGrid
                      className={classNames(
                        "__wab_instance",
                        sty.componentsTrainingTrainingGrid__fgrS0
                      )}
                      slot1={"data-recovery-basics"}
                      slot2={"geoint-challenge-1"}
                      slot3={"intro-dynamic-analysis"}
                      unnamedGroupOfVariants={"_3"}
                    />
                  }
                  offeringListSlot={
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__biXzN,
                        {
                          [sty.freeBoxglobal_theme_dark__biXzNe6UCs]:
                            hasVariant(globalVariants, "theme", "dark")
                        }
                      )}
                    >
                      <BaseComponentsListItem
                        className={classNames(
                          "__wab_instance",
                          sty.baseComponentsListItem__iObny,
                          {
                            [sty.baseComponentsListItemglobal_theme_dark__iObnye6UCs]:
                              hasVariant(globalVariants, "theme", "dark")
                          }
                        )}
                      >
                        {"HALs accompany free videos"}
                      </BaseComponentsListItem>
                      <BaseComponentsListItem
                        className={classNames(
                          "__wab_instance",
                          sty.baseComponentsListItem__gvA2O,
                          {
                            [sty.baseComponentsListItemglobal_theme_dark__gvA2Oe6UCs]:
                              hasVariant(globalVariants, "theme", "dark")
                          }
                        )}
                      >
                        {"About 2 hours of student time"}
                      </BaseComponentsListItem>
                      <BaseComponentsListItem
                        className={classNames(
                          "__wab_instance",
                          sty.baseComponentsListItem__loJaP
                        )}
                      >
                        {"Full virtual lab environments"}
                      </BaseComponentsListItem>
                      <BaseComponentsListItem
                        className={classNames(
                          "__wab_instance",
                          sty.baseComponentsListItem__ythWo
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fq71L,
                            {
                              [sty.textglobal_theme_dark__fq71Le6UCs]:
                                hasVariant(globalVariants, "theme", "dark")
                            }
                          )}
                        >
                          {"Step-by-step instructions & screenshots"}
                        </div>
                      </BaseComponentsListItem>
                    </Stack__>
                  }
                />

                <ComponentsPathwayOfferingItem
                  data-plasmic-name={"captureTheFlag"}
                  data-plasmic-override={overrides.captureTheFlag}
                  actionSlot={
                    <BaseComponentsButton
                      className={classNames(
                        "__wab_instance",
                        sty.baseComponentsButton__sx2Ht
                      )}
                      color={"secondary"}
                      end={
                        <FaAngleRightSvgIcon
                          className={classNames(projectcss.all, sty.svg__h3Iyd)}
                          role={"img"}
                        />
                      }
                      iconEnd={true}
                      kind={["fill"]}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pfBmm
                          )}
                        >
                          {"See all CTFs"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToCaptureTheFlag"] = true
                          ? (() => {
                              const actionArgs = {};
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToCaptureTheFlag"] != null &&
                          typeof $steps["goToCaptureTheFlag"] === "object" &&
                          typeof $steps["goToCaptureTheFlag"].then ===
                            "function"
                        ) {
                          $steps["goToCaptureTheFlag"] = await $steps[
                            "goToCaptureTheFlag"
                          ];
                        }
                      }}
                    />
                  }
                  centered={true}
                  className={classNames("__wab_instance", sty.captureTheFlag)}
                  headingSlot={"Capture the Flags"}
                  imageSlot={
                    <ComponentsTrainingTrainingGrid
                      className={classNames(
                        "__wab_instance",
                        sty.componentsTrainingTrainingGrid__xdYn
                      )}
                      slot1={"nahamcon-2024"}
                      slot2={"nahamcon-2024"}
                      slot3={"snyk-fetch-the-flag-2023"}
                      slot4={"snyk-fetch-the-flag-2023"}
                      slot5={"snyk-fetch-the-flag-2023"}
                      unnamedGroupOfVariants={"_2"}
                    />
                  }
                  offeringListSlot={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qnHtX
                      )}
                    >
                      {
                        "Missed an event where the Just Hacking Training Team delivered a killer Capture the Flag competition? Didn't have enough time to just roam or try other approaches?\n\nWorry no more!\n\nContinue playing to your heart's content. Only difference is that there\u2019s no time limits and no scoreboard. Learn with no pressure!"
                      }
                    </div>
                  }
                  reverse={true}
                />
              </div>
            </Stack__>
          </LayoutPageLayout>
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "layoutPageLayout",
    "h1",
    "upskillChallenges",
    "hackALongs",
    "captureTheFlag"
  ],
  layoutPageLayout: [
    "layoutPageLayout",
    "h1",
    "upskillChallenges",
    "hackALongs",
    "captureTheFlag"
  ],
  h1: ["h1"],
  upskillChallenges: ["upskillChallenges"],
  hackALongs: ["hackALongs"],
  captureTheFlag: ["captureTheFlag"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  layoutPageLayout: typeof LayoutPageLayout;
  h1: "h1";
  upskillChallenges: typeof ComponentsPathwayOfferingItem;
  hackALongs: typeof ComponentsPathwayOfferingItem;
  captureTheFlag: typeof ComponentsPathwayOfferingItem;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPathwayPathways__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPathwayPathways__VariantsArgs;
    args?: PlasmicPathwayPathways__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPathwayPathways__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPathwayPathways__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPathwayPathways__ArgProps,
          internalVariantPropNames: PlasmicPathwayPathways__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPathwayPathways__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPathwayPathways";
  } else {
    func.displayName = `PlasmicPathwayPathways.${nodeName}`;
  }
  return func;
}

export const PlasmicPathwayPathways = Object.assign(
  // Top-level PlasmicPathwayPathways renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    layoutPageLayout: makeNodeComponent("layoutPageLayout"),
    h1: makeNodeComponent("h1"),
    upskillChallenges: makeNodeComponent("upskillChallenges"),
    hackALongs: makeNodeComponent("hackALongs"),
    captureTheFlag: makeNodeComponent("captureTheFlag"),

    // Metadata about props expected for PlasmicPathwayPathways
    internalVariantProps: PlasmicPathwayPathways__VariantProps,
    internalArgProps: PlasmicPathwayPathways__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Just Hacking Pathways",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/ad7d781926a78eb9fbef8818120ae8ff.png",
      canonical: ""
    }
  }
);

export default PlasmicPathwayPathways;
/* prettier-ignore-end */
