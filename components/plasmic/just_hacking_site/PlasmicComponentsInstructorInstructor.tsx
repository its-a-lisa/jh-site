// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ka2iZDuLZRczy7yQTcifgT
// Component: UrXh7aqakI5i

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { CmsRowImage } from "@plasmicpkgs/plasmic-cms";
import { CmsRowField } from "@plasmicpkgs/plasmic-cms";

import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ka2iZDuLZRczy7yQTcifgT/projectcss
import sty from "./PlasmicComponentsInstructorInstructor.module.css"; // plasmic-import: UrXh7aqakI5i/css

createPlasmicElementProxy;

export type PlasmicComponentsInstructorInstructor__VariantMembers = {
  usage: "lineUp";
};
export type PlasmicComponentsInstructorInstructor__VariantsArgs = {
  usage?: SingleChoiceArg<"lineUp">;
};
type VariantPropType =
  keyof PlasmicComponentsInstructorInstructor__VariantsArgs;
export const PlasmicComponentsInstructorInstructor__VariantProps =
  new Array<VariantPropType>("usage");

export type PlasmicComponentsInstructorInstructor__ArgsType = {
  imageField?: string;
  entryField?: string;
};
type ArgPropType = keyof PlasmicComponentsInstructorInstructor__ArgsType;
export const PlasmicComponentsInstructorInstructor__ArgProps =
  new Array<ArgPropType>("imageField", "entryField");

export type PlasmicComponentsInstructorInstructor__OverridesType = {
  root?: Flex__<"div">;
  cmsEntryImage?: Flex__<typeof CmsRowImage>;
  img?: Flex__<typeof PlasmicImg__>;
  cmsEntryField?: Flex__<typeof CmsRowField>;
};

export interface DefaultComponentsInstructorInstructorProps {
  imageField?: string;
  entryField?: string;
  usage?: SingleChoiceArg<"lineUp">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComponentsInstructorInstructor__RenderFunc(props: {
  variants: PlasmicComponentsInstructorInstructor__VariantsArgs;
  args: PlasmicComponentsInstructorInstructor__ArgsType;
  overrides: PlasmicComponentsInstructorInstructor__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          imageField: "https://i.pravatar.cc/300",
          entryField: "Name"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "usage",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.usage
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale"),
          [sty.rootusage_lineUp]: hasVariant($state, "usage", "lineUp")
        }
      )}
      onClick={async event => {
        const $steps = {};

        $steps["goToPage"] = true
          ? (() => {
              const actionArgs = {
                destination: (() => {
                  try {
                    return `/author/${$ctx.plasmicCmsAuthorItem.data.slug}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              };
              return (({ destination }) => {
                if (
                  typeof destination === "string" &&
                  destination.startsWith("#")
                ) {
                  document
                    .getElementById(destination.substr(1))
                    .scrollIntoView({ behavior: "smooth" });
                } else {
                  __nextRouter?.push(destination);
                }
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["goToPage"] != null &&
          typeof $steps["goToPage"] === "object" &&
          typeof $steps["goToPage"].then === "function"
        ) {
          $steps["goToPage"] = await $steps["goToPage"];
        }
      }}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__lj6Wb, {
          [sty.freeBoxusage_lineUp__lj6WbTaOt]: hasVariant(
            $state,
            "usage",
            "lineUp"
          )
        })}
      >
        <CmsRowImage
          data-plasmic-name={"cmsEntryImage"}
          data-plasmic-override={overrides.cmsEntryImage}
          className={classNames("__wab_instance", sty.cmsEntryImage, {
            [sty.cmsEntryImageusage_lineUp]: hasVariant(
              $state,
              "usage",
              "lineUp"
            )
          })}
          field={(() => {
            try {
              return $props.imageField;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          srcProp={"src"}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img, {
              [sty.imgusage_lineUp]: hasVariant($state, "usage", "lineUp")
            })}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            src={(() => {
              try {
                return $props.imageField;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "https://studio.plasmic.app/static/img/placeholder-full.png";
                }
                throw e;
              }
            })()}
            width={"250px"}
          />
        </CmsRowImage>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox___3EeQx, {
          [sty.freeBoxusage_lineUp___3EeQxtaOt]: hasVariant(
            $state,
            "usage",
            "lineUp"
          )
        })}
      >
        <CmsRowField
          data-plasmic-name={"cmsEntryField"}
          data-plasmic-override={overrides.cmsEntryField}
          className={classNames("__wab_instance", sty.cmsEntryField, {
            [sty.cmsEntryFieldusage_lineUp]: hasVariant(
              $state,
              "usage",
              "lineUp"
            )
          })}
          field={"name"}
          themeResetClassName={classNames(
            projectcss.root_reset,
            projectcss.root_reset_tags,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_17_sds_foundation_global_css.plasmic_tokens,
            plasmic_17_sds_foundation_system_css.plasmic_tokens,
            {
              [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
                hasVariant(globalVariants, "theme", "darkGrayscale"),
              [plasmic_17_sds_foundation_global_css.global_theme_dark]:
                hasVariant(globalVariants, "theme", "dark"),
              [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
                hasVariant(globalVariants, "theme", "grayscale")
            }
          )}
        />
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "cmsEntryImage", "img", "cmsEntryField"],
  cmsEntryImage: ["cmsEntryImage", "img"],
  img: ["img"],
  cmsEntryField: ["cmsEntryField"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  cmsEntryImage: typeof CmsRowImage;
  img: typeof PlasmicImg__;
  cmsEntryField: typeof CmsRowField;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicComponentsInstructorInstructor__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicComponentsInstructorInstructor__VariantsArgs;
    args?: PlasmicComponentsInstructorInstructor__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicComponentsInstructorInstructor__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicComponentsInstructorInstructor__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComponentsInstructorInstructor__ArgProps,
          internalVariantPropNames:
            PlasmicComponentsInstructorInstructor__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComponentsInstructorInstructor__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComponentsInstructorInstructor";
  } else {
    func.displayName = `PlasmicComponentsInstructorInstructor.${nodeName}`;
  }
  return func;
}

export const PlasmicComponentsInstructorInstructor = Object.assign(
  // Top-level PlasmicComponentsInstructorInstructor renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    cmsEntryImage: makeNodeComponent("cmsEntryImage"),
    img: makeNodeComponent("img"),
    cmsEntryField: makeNodeComponent("cmsEntryField"),

    // Metadata about props expected for PlasmicComponentsInstructorInstructor
    internalVariantProps: PlasmicComponentsInstructorInstructor__VariantProps,
    internalArgProps: PlasmicComponentsInstructorInstructor__ArgProps
  }
);

export default PlasmicComponentsInstructorInstructor;
/* prettier-ignore-end */
