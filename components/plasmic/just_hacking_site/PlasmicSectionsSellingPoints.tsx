// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ka2iZDuLZRczy7yQTcifgT
// Component: 9mwJf-RhFZd2

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import BaseComponentsTextInput from "../../BaseComponentsTextInput"; // plasmic-import: y55jmOJB_ZER/component
import BaseComponentsButton from "../../BaseComponentsButton"; // plasmic-import: RJCN3wmY1s2W/component

import { useScreenVariants as useScreenVariantssqmLxjkgQr } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: sqmLXJKG--Qr/globalVariant
import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ka2iZDuLZRczy7yQTcifgT/projectcss
import sty from "./PlasmicSectionsSellingPoints.module.css"; // plasmic-import: 9mwJf-RhFZd2/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: _WS5X-3NT1mr/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: 32aCNZ5iI3FE/icon

createPlasmicElementProxy;

export type PlasmicSectionsSellingPoints__VariantMembers = {};
export type PlasmicSectionsSellingPoints__VariantsArgs = {};
type VariantPropType = keyof PlasmicSectionsSellingPoints__VariantsArgs;
export const PlasmicSectionsSellingPoints__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSectionsSellingPoints__ArgsType = {};
type ArgPropType = keyof PlasmicSectionsSellingPoints__ArgsType;
export const PlasmicSectionsSellingPoints__ArgProps = new Array<ArgPropType>();

export type PlasmicSectionsSellingPoints__OverridesType = {
  root?: Flex__<"section">;
  foreground?: Flex__<"div">;
  columns?: Flex__<"div">;
  h2?: Flex__<"h2">;
  span?: Flex__<"span">;
  h4?: Flex__<"h4">;
  textInput?: Flex__<typeof BaseComponentsTextInput>;
  baseComponentsButton?: Flex__<typeof BaseComponentsButton>;
};

export interface DefaultSectionsSellingPointsProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionsSellingPoints__RenderFunc(props: {
  variants: PlasmicSectionsSellingPoints__VariantsArgs;
  args: PlasmicSectionsSellingPoints__ArgsType;
  overrides: PlasmicSectionsSellingPoints__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssqmLxjkgQr(),
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <Stack__
      as={"section"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale"),
          [sty.rootglobal_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"foreground"}
        data-plasmic-override={overrides.foreground}
        hasGap={true}
        className={classNames(projectcss.all, sty.foreground)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          hasGap={true}
          className={classNames(projectcss.all, sty.columns, {
            [sty.columnsglobal_theme_dark]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            )
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.column__tui1Q)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__qmqEe)}
            >
              <h2
                data-plasmic-name={"h2"}
                data-plasmic-override={overrides.h2}
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2,
                  {
                    [sty.h2global_theme_dark]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  }
                )}
              >
                <React.Fragment>
                  <React.Fragment>{"What makes "}</React.Fragment>
                  {
                    <span
                      data-plasmic-name={"span"}
                      data-plasmic-override={overrides.span}
                      className={classNames(
                        projectcss.all,
                        projectcss.span,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.span
                      )}
                    >
                      {"Just Hacking"}
                    </span>
                  }
                  <React.Fragment>{" so great"}</React.Fragment>
                </React.Fragment>
              </h2>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5Kn1G,
                  {
                    [sty.textglobal_theme_dark___5Kn1Ge6UCs]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  }
                )}
              >
                {
                  "Explore our flexible, zero-cost learning opportunities designed to fit your needs. Engage in interactive, hands-on \n\nexperiences led by seasoned instructors, and choose from multiple learning paths to achieve your goals your way!"
                }
              </div>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__w0FHk)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__dilqQ)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vh8Mk
                  )}
                >
                  {"Zero Cost Options"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rczZr)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tolM
                  )}
                >
                  {"Experienced Instructors"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__z1LF)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6BEQa
                  )}
                >
                  {"Interactive & Hands On"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__j9LEj)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mIcP
                  )}
                >
                  {"Multiple Ways to Learn"}
                </div>
              </Stack__>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.column__mYiMl, {
              [sty.columnglobal_theme_dark__mYiMLe6UCs]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__hgS6)}>
              <h4
                data-plasmic-name={"h4"}
                data-plasmic-override={overrides.h4}
                className={classNames(
                  projectcss.all,
                  projectcss.h4,
                  projectcss.__wab_text,
                  sty.h4
                )}
              >
                {"Get the scoop on cybersec right in your inbox"}
              </h4>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4HDo
                )}
              >
                {
                  "Subscribe to Cybersecurity Shenanigans for monthly updates \ud83d\ude0e"
                }
              </div>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vp3L)}
            >
              <BaseComponentsTextInput
                data-plasmic-name={"textInput"}
                data-plasmic-override={overrides.textInput}
                className={classNames("__wab_instance", sty.textInput)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "textInput",
                    "value"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              />

              <BaseComponentsButton
                data-plasmic-name={"baseComponentsButton"}
                data-plasmic-override={overrides.baseComponentsButton}
                className={classNames(
                  "__wab_instance",
                  sty.baseComponentsButton,
                  {
                    [sty.baseComponentsButtonglobal_theme_dark]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  }
                )}
                color={"primary"}
                kind={["fill"]}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___80Vse
                    )}
                  >
                    {"Sign Up"}
                  </div>
                }
                size={
                  hasVariant(globalVariants, "theme", "dark")
                    ? "small"
                    : undefined
                }
              />
            </Stack__>
          </Stack__>
        </Stack__>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "foreground",
    "columns",
    "h2",
    "span",
    "h4",
    "textInput",
    "baseComponentsButton"
  ],
  foreground: [
    "foreground",
    "columns",
    "h2",
    "span",
    "h4",
    "textInput",
    "baseComponentsButton"
  ],
  columns: ["columns", "h2", "span", "h4", "textInput", "baseComponentsButton"],
  h2: ["h2", "span"],
  span: ["span"],
  h4: ["h4"],
  textInput: ["textInput"],
  baseComponentsButton: ["baseComponentsButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
  foreground: "div";
  columns: "div";
  h2: "h2";
  span: "span";
  h4: "h4";
  textInput: typeof BaseComponentsTextInput;
  baseComponentsButton: typeof BaseComponentsButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionsSellingPoints__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionsSellingPoints__VariantsArgs;
    args?: PlasmicSectionsSellingPoints__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSectionsSellingPoints__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSectionsSellingPoints__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionsSellingPoints__ArgProps,
          internalVariantPropNames: PlasmicSectionsSellingPoints__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionsSellingPoints__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionsSellingPoints";
  } else {
    func.displayName = `PlasmicSectionsSellingPoints.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionsSellingPoints = Object.assign(
  // Top-level PlasmicSectionsSellingPoints renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    foreground: makeNodeComponent("foreground"),
    columns: makeNodeComponent("columns"),
    h2: makeNodeComponent("h2"),
    span: makeNodeComponent("span"),
    h4: makeNodeComponent("h4"),
    textInput: makeNodeComponent("textInput"),
    baseComponentsButton: makeNodeComponent("baseComponentsButton"),

    // Metadata about props expected for PlasmicSectionsSellingPoints
    internalVariantProps: PlasmicSectionsSellingPoints__VariantProps,
    internalArgProps: PlasmicSectionsSellingPoints__ArgProps
  }
);

export default PlasmicSectionsSellingPoints;
/* prettier-ignore-end */
