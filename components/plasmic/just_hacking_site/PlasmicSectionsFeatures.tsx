// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ka2iZDuLZRczy7yQTcifgT
// Component: kfQ6edVcoSz5

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import BaseComponentsFancyTabButton from "../../BaseComponentsFancyTabButton"; // plasmic-import: LrLWz26fGyoh/component
import { TabContent } from "@plasmicpkgs/plasmic-tabs";

import { useScreenVariants as useScreenVariantssqmLxjkgQr } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: sqmLXJKG--Qr/globalVariant
import {
  ThemeValue,
  useTheme
} from "../17_sds_foundation_global/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../17_sds_foundation_global/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_17_sds_foundation_global_css from "../17_sds_foundation_global/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_17_sds_foundation_system_css from "../17_sds_foundation_system/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ka2iZDuLZRczy7yQTcifgT/projectcss
import sty from "./PlasmicSectionsFeatures.module.css"; // plasmic-import: kfQ6edVcoSz5/css

createPlasmicElementProxy;

export type PlasmicSectionsFeatures__VariantMembers = {};
export type PlasmicSectionsFeatures__VariantsArgs = {};
type VariantPropType = keyof PlasmicSectionsFeatures__VariantsArgs;
export const PlasmicSectionsFeatures__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSectionsFeatures__ArgsType = {};
type ArgPropType = keyof PlasmicSectionsFeatures__ArgsType;
export const PlasmicSectionsFeatures__ArgProps = new Array<ArgPropType>();

export type PlasmicSectionsFeatures__OverridesType = {
  root?: Flex__<"div">;
  h2?: Flex__<"h2">;
  tabsContainer?: Flex__<typeof TabsContainer>;
  columns?: Flex__<"div">;
  tab01?: Flex__<typeof TabButton>;
  tab02?: Flex__<typeof TabButton>;
  tab03?: Flex__<typeof TabButton>;
  tab04?: Flex__<typeof TabButton>;
  content01?: Flex__<typeof TabContent>;
  content02?: Flex__<typeof TabContent>;
  content03?: Flex__<typeof TabContent>;
  content4?: Flex__<typeof TabContent>;
};

export interface DefaultSectionsFeaturesProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionsFeatures__RenderFunc(props: {
  variants: PlasmicSectionsFeatures__VariantsArgs;
  args: PlasmicSectionsFeatures__ArgsType;
  overrides: PlasmicSectionsFeatures__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssqmLxjkgQr(),
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_17_sds_foundation_global_css.plasmic_tokens,
        plasmic_17_sds_foundation_system_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_17_sds_foundation_global_css.global_theme_darkGrayscale]:
            hasVariant(globalVariants, "theme", "darkGrayscale"),
          [plasmic_17_sds_foundation_global_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_17_sds_foundation_global_css.global_theme_grayscale]:
            hasVariant(globalVariants, "theme", "grayscale")
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__lhq4J)}
      >
        <h2
          data-plasmic-name={"h2"}
          data-plasmic-override={overrides.h2}
          className={classNames(
            projectcss.all,
            projectcss.h2,
            projectcss.__wab_text,
            sty.h2
          )}
        >
          {"Why people love Just Hacking"}
        </h2>
        <div className={classNames(projectcss.all, sty.freeBox__vUIn)}>
          <TabsContainer
            data-plasmic-name={"tabsContainer"}
            data-plasmic-override={overrides.tabsContainer}
            initialKey={"alpha"}
            previewAll={true}
          >
            <DataCtxReader__>
              {$ctx => (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__lBsEt)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__sgaja)}
                    >
                      <TabButton
                        data-plasmic-name={"tab01"}
                        data-plasmic-override={overrides.tab01}
                        className={classNames("__wab_instance", sty.tab01)}
                        tabKey={"alpha"}
                      >
                        <BaseComponentsFancyTabButton>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dCRvc
                            )}
                          >
                            {"Zero Cost Options"}
                          </div>
                        </BaseComponentsFancyTabButton>
                      </TabButton>
                      <TabButton
                        data-plasmic-name={"tab02"}
                        data-plasmic-override={overrides.tab02}
                        className={classNames("__wab_instance", sty.tab02)}
                        tabKey={"beta"}
                      >
                        <BaseComponentsFancyTabButton>
                          {"Interactive & Hands On"}
                        </BaseComponentsFancyTabButton>
                      </TabButton>
                      <TabButton
                        data-plasmic-name={"tab03"}
                        data-plasmic-override={overrides.tab03}
                        className={classNames("__wab_instance", sty.tab03)}
                        tabKey={"charlie"}
                      >
                        <BaseComponentsFancyTabButton>
                          {"Experienced Instructors"}
                        </BaseComponentsFancyTabButton>
                      </TabButton>
                      <TabButton
                        data-plasmic-name={"tab04"}
                        data-plasmic-override={overrides.tab04}
                        className={classNames("__wab_instance", sty.tab04)}
                        tabKey={"delta"}
                      >
                        <BaseComponentsFancyTabButton>
                          {"Multiple Ways to Learn"}
                        </BaseComponentsFancyTabButton>
                      </TabButton>
                    </Stack__>
                  </div>
                  <div className={classNames(projectcss.all, sty.column__qEr)}>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__xh6Ni)}
                    >
                      <TabContent
                        data-plasmic-name={"content01"}
                        data-plasmic-override={overrides.content01}
                        className={classNames("__wab_instance", sty.content01)}
                        tabKey={"alpha"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__en748
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8JiLc
                            )}
                          >
                            {
                              "At Just Hacking Training, we want to make our offerings as accessible as possible, that is why we have released some training as zero cost options."
                            }
                          </div>
                        </div>
                      </TabContent>
                      <TabContent
                        data-plasmic-name={"content02"}
                        data-plasmic-override={overrides.content02}
                        className={classNames("__wab_instance", sty.content02)}
                        tabKey={"beta"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eub1L
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___778Z8
                            )}
                          >
                            {
                              "All of our trainings have some kind of interactive aspect to them., We have devloped in a way so you get real hands-on experience."
                            }
                          </div>
                        </div>
                      </TabContent>
                      <TabContent
                        data-plasmic-name={"content03"}
                        data-plasmic-override={overrides.content03}
                        className={classNames("__wab_instance", sty.content03)}
                        tabKey={"charlie"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___1XImG
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eNvB
                            )}
                          >
                            {
                              "We retain instructors who are experts in their domain and are excited to share theirn knowledge with others."
                            }
                          </div>
                        </div>
                      </TabContent>
                      <TabContent
                        data-plasmic-name={"content4"}
                        data-plasmic-override={overrides.content4}
                        className={classNames("__wab_instance", sty.content4)}
                        tabKey={"delta"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mv618
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hiLTx
                            )}
                          >
                            {
                              "We have a variety of different learning formats as well as different modalities for learning."
                            }
                          </div>
                        </div>
                      </TabContent>
                    </Stack__>
                  </div>
                </Stack__>
              )}
            </DataCtxReader__>
          </TabsContainer>
        </div>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h2",
    "tabsContainer",
    "columns",
    "tab01",
    "tab02",
    "tab03",
    "tab04",
    "content01",
    "content02",
    "content03",
    "content4"
  ],
  h2: ["h2"],
  tabsContainer: [
    "tabsContainer",
    "columns",
    "tab01",
    "tab02",
    "tab03",
    "tab04",
    "content01",
    "content02",
    "content03",
    "content4"
  ],
  columns: [
    "columns",
    "tab01",
    "tab02",
    "tab03",
    "tab04",
    "content01",
    "content02",
    "content03",
    "content4"
  ],
  tab01: ["tab01"],
  tab02: ["tab02"],
  tab03: ["tab03"],
  tab04: ["tab04"],
  content01: ["content01"],
  content02: ["content02"],
  content03: ["content03"],
  content4: ["content4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h2: "h2";
  tabsContainer: typeof TabsContainer;
  columns: "div";
  tab01: typeof TabButton;
  tab02: typeof TabButton;
  tab03: typeof TabButton;
  tab04: typeof TabButton;
  content01: typeof TabContent;
  content02: typeof TabContent;
  content03: typeof TabContent;
  content4: typeof TabContent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionsFeatures__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionsFeatures__VariantsArgs;
    args?: PlasmicSectionsFeatures__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSectionsFeatures__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSectionsFeatures__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionsFeatures__ArgProps,
          internalVariantPropNames: PlasmicSectionsFeatures__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionsFeatures__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionsFeatures";
  } else {
    func.displayName = `PlasmicSectionsFeatures.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionsFeatures = Object.assign(
  // Top-level PlasmicSectionsFeatures renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    tabsContainer: makeNodeComponent("tabsContainer"),
    columns: makeNodeComponent("columns"),
    tab01: makeNodeComponent("tab01"),
    tab02: makeNodeComponent("tab02"),
    tab03: makeNodeComponent("tab03"),
    tab04: makeNodeComponent("tab04"),
    content01: makeNodeComponent("content01"),
    content02: makeNodeComponent("content02"),
    content03: makeNodeComponent("content03"),
    content4: makeNodeComponent("content4"),

    // Metadata about props expected for PlasmicSectionsFeatures
    internalVariantProps: PlasmicSectionsFeatures__VariantProps,
    internalArgProps: PlasmicSectionsFeatures__ArgProps
  }
);

export default PlasmicSectionsFeatures;
/* prettier-ignore-end */
